import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:flutter_svg/svg.dart';import 'package:innaya_app/core/app_colors.dart';import 'package:innaya_app/core/app_size.dart';import 'package:innaya_app/core/init_app.dart';import 'package:innaya_app/features/feature_auth/controller/login_controller.dart';import 'package:innaya_app/features/widget/RoundButtomLoading.dart';import 'package:innaya_app/features/widget/custome_text.dart';import 'package:innaya_app/features/widget/widjet_relase.dart';import 'package:innaya_app/localization/lang/message.dart';import 'package:innaya_app/utility/shared_method.dart';import 'package:innaya_app/utility/size_config.dart';import 'package:get/get.dart';import 'package:pin_code_fields/pin_code_fields.dart';class ViewVerficationCode extends StatefulWidget {  String? phoneNumber;  String? Password;  int? type;  ViewVerficationCode({this.phoneNumber, this.Password, this.type=1});  @override  _BViewVerficationCodeState createState() => _BViewVerficationCodeState();}class _BViewVerficationCodeState extends State<ViewVerficationCode> {  TextEditingController? _textEditingControlleActiveCode;  BuildContext? mcontext;  var _fromKey;  int state = 1;  int stateResent = 1;  String ActiveCode = "";   final login_Controller=Get.put(LoginController());  @override  void initState() {    _textEditingControlleActiveCode = TextEditingController();    _fromKey = GlobalKey<FormState>();    ;    // TODO: implement initState    super.initState();  }  @override  void dispose() {    _textEditingControlleActiveCode!.dispose();    // errorController.close();    // TODO: implement dispose    super.dispose();  }  @override  Widget build(BuildContext context) {    ScreenUtil.init(     context                    ,      designSize: Size(SCREEN_WIDTH, SCREEN_HIGHT),    );    mcontext = context;    return Scaffold(        appBar: getIt<WidjetRelase>()            .appBar(title:  kVERIFICATION),        body: Container(      margin: EdgeInsets.all(20),      alignment: Alignment.topCenter,      child: SingleChildScrollView(        child: Form(          key: _fromKey,          child: Column(            mainAxisAlignment: MainAxisAlignment.center,            children: [              Container(                margin: EdgeInsets.only(top: 60.h),                alignment: Alignment.center,                child: SvgPicture.asset(                  "assets/icons/lock.svg",                  height: SizeConfig.screenHeight! * 0.1,                ),              ),              SizedBox(                height: 15,              ),              CustomeText(                  title: kVERIFICATION,                  color: kBorderFocuseColor,                  fontSize: 25.sp,                  fontWeight: FontWeight.bold),              SizedBox(                height: 10,              ),              CustomeText(                title: "ادخل الرقم 1234 لتأكيد حسابك",                color: Colors.black,                fontSize: 14.sp,              ),       /*       CustomeText(                title: kmsg_verfy_code,                color: Colors.black,                fontSize: 14.sp,              ),              SizedBox(                height: 5,              ),              CustomeText(                title: widget.phoneNumber!,                color: Colors.black,                fontSize: 14.sp,              ),*/              SizedBox(                height: 50,              ),              Padding(                padding: const EdgeInsets.only(left: 30, right: 30),                child: BildeTextActiveCode(),              ),              SizedBox(                height: 50,              ),             Obx(                     () {                       if(login_Controller.isRefresh.value){                         Future.delayed(Duration(microseconds: 500)).then((value) {                           _textEditingControlleActiveCode!.clear();                         });                         login_Controller.isRefresh.value=false;                       }                  return SizedBox(                      height: 54.h,                      child: RoundButtomLoading(                    state: login_Controller.state.value,                    title: kVERIFICATION,                    press: () {                      if (_textEditingControlleActiveCode!.text.isEmpty) {                        snackError(title: kErorr.tr, body: kFiledNullError.tr);                      } else {                        print(_textEditingControlleActiveCode!.text);                        if (widget.type == 1) {                          VerifyUser();                        } else {                          VerifyMobile();                        }                      }                      /*  if (state == 1) {                        if (_fromKey.currentState.validate()) {                          setState(() {                            state = 2;                        //    VerficationCode();                          });                          //  WidjetRelase.getIntanse().onLoading(mContext).show();                          // _fromKey.currentState.save();                          // if all are valid then go to success screen                        } else {                          print("ffffff");                        }                      }*/                    },                  ));                }              ),              SizedBox(                height: 20,              ),              WidgetreSentActiveCode(),            ],          ),        ),      ),    ));  }  void VerifyUser() {    print(_textEditingControlleActiveCode!.text);       var bodyData = { 'mobile':widget.phoneNumber,      'otp_code':_textEditingControlleActiveCode!.text,    };   print(bodyData);    login_Controller!.VerifyAccountUser(bodyData);  }  void VerifyMobile() {    //WidjetRelase.getIntanse().onLoading(mcontext).show();    print(_textEditingControlleActiveCode!.text);    var bodyData = { 'mobile':widget.phoneNumber,      'otp_code':_textEditingControlleActiveCode!.text,    };    login_Controller!.VerifyForgetPass(bodyData);  }  Widget BildeTextActiveCode() {    return PinCodeTextField(      length: 4,      textStyle: TextStyle(        fontSize: 18,        color: Colors.black,        fontWeight: FontWeight.bold,      ),      obscureText: false,      animationType: AnimationType.fade,      pinTheme: PinTheme(        shape: PinCodeFieldShape.underline,        borderRadius: BorderRadius.circular(5),        fieldHeight: 40,        fieldWidth: 40,        disabledColor: Color(0xFFCECECE),        activeColor: Colors.grey,        selectedFillColor: kBackGroundApp,        activeFillColor:kBackGroundApp,        selectedColor: Colors.grey,        inactiveFillColor: kBackGroundApp,        inactiveColor: Color(0xFFCECECE),      ),      cursorColor: Colors.black,      animationDuration: Duration(milliseconds: 300),      backgroundColor: kBackGroundApp,      enableActiveFill: true,      controller: _textEditingControlleActiveCode,      //  errorAnimationController: errorController,      keyboardType: TextInputType.number,      onCompleted: (v) {        print("Completed");        print(v);        ActiveCode = v;      },      onChanged: (value) {        print(value);      },      /*validator: (value) {        if(value.isEmpty) {          return kPleaseActiveCode.tr;        }else if(value.length!=4) {         // return kPleaseActiveCode.tr;        }else{          return null;        }      },*/      beforeTextPaste: (text) {        print("Allowing to paste $text");        //if you return true then it will show the paste confirmation dialog. Otherwise if false, then nothing will happen.        //but you can show anything you want here, like your pop up saying wrong paste format or etc        return true;      },      appContext: context,    );  }  Widget WidgetreSentActiveCode() {    return Row(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      children: [        Text(          kNotResentCode.tr,          style: TextStyle(              color: kBorderFocuseColor,              fontSize: getProportionateScreenWidth(10),              fontWeight: FontWeight.bold),        ),        SizedBox(          width: getProportionateScreenWidth(3),        ),        (stateResent == 1)            ? GestureDetector(                onTap: () {                  if (stateResent == 1) {}                },                child: Text(                  kResentCode.tr,                  style: TextStyle(                      color: kColorButtom,                      fontSize: getProportionateScreenWidth(10)),                ),              )            : SizedBox(                width: getProportionateScreenWidth(10),                height: getProportionateScreenWidth(10),                child: CircularProgressIndicator(                  valueColor: AlwaysStoppedAnimation<Color>(Colors.black),                ),              )      ],    );  }}